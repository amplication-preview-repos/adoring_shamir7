/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bgc } from "./Bgc";
import { BgcCountArgs } from "./BgcCountArgs";
import { BgcFindManyArgs } from "./BgcFindManyArgs";
import { BgcFindUniqueArgs } from "./BgcFindUniqueArgs";
import { CreateBgcArgs } from "./CreateBgcArgs";
import { UpdateBgcArgs } from "./UpdateBgcArgs";
import { DeleteBgcArgs } from "./DeleteBgcArgs";
import { BgcService } from "../bgc.service";
@graphql.Resolver(() => Bgc)
export class BgcResolverBase {
  constructor(protected readonly service: BgcService) {}

  async _bgcsMeta(
    @graphql.Args() args: BgcCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bgc])
  async bgcs(@graphql.Args() args: BgcFindManyArgs): Promise<Bgc[]> {
    return this.service.bgcs(args);
  }

  @graphql.Query(() => Bgc, { nullable: true })
  async bgc(@graphql.Args() args: BgcFindUniqueArgs): Promise<Bgc | null> {
    const result = await this.service.bgc(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bgc)
  async createBgc(@graphql.Args() args: CreateBgcArgs): Promise<Bgc> {
    return await this.service.createBgc({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bgc)
  async updateBgc(@graphql.Args() args: UpdateBgcArgs): Promise<Bgc | null> {
    try {
      return await this.service.updateBgc({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bgc)
  async deleteBgc(@graphql.Args() args: DeleteBgcArgs): Promise<Bgc | null> {
    try {
      return await this.service.deleteBgc(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
