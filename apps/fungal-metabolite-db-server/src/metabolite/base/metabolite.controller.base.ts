/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MetaboliteService } from "../metabolite.service";
import { MetaboliteCreateInput } from "./MetaboliteCreateInput";
import { Metabolite } from "./Metabolite";
import { MetaboliteFindManyArgs } from "./MetaboliteFindManyArgs";
import { MetaboliteWhereUniqueInput } from "./MetaboliteWhereUniqueInput";
import { MetaboliteUpdateInput } from "./MetaboliteUpdateInput";

export class MetaboliteControllerBase {
  constructor(protected readonly service: MetaboliteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Metabolite })
  async createMetabolite(
    @common.Body() data: MetaboliteCreateInput
  ): Promise<Metabolite> {
    return await this.service.createMetabolite({
      data: {
        ...data,

        chemicalGroup: data.chemicalGroup
          ? {
              connect: data.chemicalGroup,
            }
          : undefined,
      },
      select: {
        chemicalGroup: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Metabolite] })
  @ApiNestedQuery(MetaboliteFindManyArgs)
  async metabolites(@common.Req() request: Request): Promise<Metabolite[]> {
    const args = plainToClass(MetaboliteFindManyArgs, request.query);
    return this.service.metabolites({
      ...args,
      select: {
        chemicalGroup: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Metabolite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async metabolite(
    @common.Param() params: MetaboliteWhereUniqueInput
  ): Promise<Metabolite | null> {
    const result = await this.service.metabolite({
      where: params,
      select: {
        chemicalGroup: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Metabolite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMetabolite(
    @common.Param() params: MetaboliteWhereUniqueInput,
    @common.Body() data: MetaboliteUpdateInput
  ): Promise<Metabolite | null> {
    try {
      return await this.service.updateMetabolite({
        where: params,
        data: {
          ...data,

          chemicalGroup: data.chemicalGroup
            ? {
                connect: data.chemicalGroup,
              }
            : undefined,
        },
        select: {
          chemicalGroup: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Metabolite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMetabolite(
    @common.Param() params: MetaboliteWhereUniqueInput
  ): Promise<Metabolite | null> {
    try {
      return await this.service.deleteMetabolite({
        where: params,
        select: {
          chemicalGroup: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
