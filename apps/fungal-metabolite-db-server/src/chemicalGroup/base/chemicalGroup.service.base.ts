/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ChemicalGroup as PrismaChemicalGroup,
  Metabolite as PrismaMetabolite,
} from "@prisma/client";

export class ChemicalGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChemicalGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chemicalGroup.count(args);
  }

  async chemicalGroups(
    args: Prisma.ChemicalGroupFindManyArgs
  ): Promise<PrismaChemicalGroup[]> {
    return this.prisma.chemicalGroup.findMany(args);
  }
  async chemicalGroup(
    args: Prisma.ChemicalGroupFindUniqueArgs
  ): Promise<PrismaChemicalGroup | null> {
    return this.prisma.chemicalGroup.findUnique(args);
  }
  async createChemicalGroup(
    args: Prisma.ChemicalGroupCreateArgs
  ): Promise<PrismaChemicalGroup> {
    return this.prisma.chemicalGroup.create(args);
  }
  async updateChemicalGroup(
    args: Prisma.ChemicalGroupUpdateArgs
  ): Promise<PrismaChemicalGroup> {
    return this.prisma.chemicalGroup.update(args);
  }
  async deleteChemicalGroup(
    args: Prisma.ChemicalGroupDeleteArgs
  ): Promise<PrismaChemicalGroup> {
    return this.prisma.chemicalGroup.delete(args);
  }

  async findMetabolites(
    parentId: string,
    args: Prisma.MetaboliteFindManyArgs
  ): Promise<PrismaMetabolite[]> {
    return this.prisma.chemicalGroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .metabolites(args);
  }
}
