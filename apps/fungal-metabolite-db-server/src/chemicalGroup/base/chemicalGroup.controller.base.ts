/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChemicalGroupService } from "../chemicalGroup.service";
import { ChemicalGroupCreateInput } from "./ChemicalGroupCreateInput";
import { ChemicalGroup } from "./ChemicalGroup";
import { ChemicalGroupFindManyArgs } from "./ChemicalGroupFindManyArgs";
import { ChemicalGroupWhereUniqueInput } from "./ChemicalGroupWhereUniqueInput";
import { ChemicalGroupUpdateInput } from "./ChemicalGroupUpdateInput";
import { MetaboliteFindManyArgs } from "../../metabolite/base/MetaboliteFindManyArgs";
import { Metabolite } from "../../metabolite/base/Metabolite";
import { MetaboliteWhereUniqueInput } from "../../metabolite/base/MetaboliteWhereUniqueInput";

export class ChemicalGroupControllerBase {
  constructor(protected readonly service: ChemicalGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChemicalGroup })
  async createChemicalGroup(
    @common.Body() data: ChemicalGroupCreateInput
  ): Promise<ChemicalGroup> {
    return await this.service.createChemicalGroup({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChemicalGroup] })
  @ApiNestedQuery(ChemicalGroupFindManyArgs)
  async chemicalGroups(
    @common.Req() request: Request
  ): Promise<ChemicalGroup[]> {
    const args = plainToClass(ChemicalGroupFindManyArgs, request.query);
    return this.service.chemicalGroups({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChemicalGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chemicalGroup(
    @common.Param() params: ChemicalGroupWhereUniqueInput
  ): Promise<ChemicalGroup | null> {
    const result = await this.service.chemicalGroup({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChemicalGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChemicalGroup(
    @common.Param() params: ChemicalGroupWhereUniqueInput,
    @common.Body() data: ChemicalGroupUpdateInput
  ): Promise<ChemicalGroup | null> {
    try {
      return await this.service.updateChemicalGroup({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChemicalGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChemicalGroup(
    @common.Param() params: ChemicalGroupWhereUniqueInput
  ): Promise<ChemicalGroup | null> {
    try {
      return await this.service.deleteChemicalGroup({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/metabolites")
  @ApiNestedQuery(MetaboliteFindManyArgs)
  async findMetabolites(
    @common.Req() request: Request,
    @common.Param() params: ChemicalGroupWhereUniqueInput
  ): Promise<Metabolite[]> {
    const query = plainToClass(MetaboliteFindManyArgs, request.query);
    const results = await this.service.findMetabolites(params.id, {
      ...query,
      select: {
        chemicalGroup: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/metabolites")
  async connectMetabolites(
    @common.Param() params: ChemicalGroupWhereUniqueInput,
    @common.Body() body: MetaboliteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      metabolites: {
        connect: body,
      },
    };
    await this.service.updateChemicalGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/metabolites")
  async updateMetabolites(
    @common.Param() params: ChemicalGroupWhereUniqueInput,
    @common.Body() body: MetaboliteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      metabolites: {
        set: body,
      },
    };
    await this.service.updateChemicalGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/metabolites")
  async disconnectMetabolites(
    @common.Param() params: ChemicalGroupWhereUniqueInput,
    @common.Body() body: MetaboliteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      metabolites: {
        disconnect: body,
      },
    };
    await this.service.updateChemicalGroup({
      where: params,
      data,
      select: { id: true },
    });
  }
}
