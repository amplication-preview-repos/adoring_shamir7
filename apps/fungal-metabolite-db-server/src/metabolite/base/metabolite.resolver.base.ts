/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Metabolite } from "./Metabolite";
import { MetaboliteCountArgs } from "./MetaboliteCountArgs";
import { MetaboliteFindManyArgs } from "./MetaboliteFindManyArgs";
import { MetaboliteFindUniqueArgs } from "./MetaboliteFindUniqueArgs";
import { CreateMetaboliteArgs } from "./CreateMetaboliteArgs";
import { UpdateMetaboliteArgs } from "./UpdateMetaboliteArgs";
import { DeleteMetaboliteArgs } from "./DeleteMetaboliteArgs";
import { ChemicalGroup } from "../../chemicalGroup/base/ChemicalGroup";
import { MetaboliteService } from "../metabolite.service";
@graphql.Resolver(() => Metabolite)
export class MetaboliteResolverBase {
  constructor(protected readonly service: MetaboliteService) {}

  async _metabolitesMeta(
    @graphql.Args() args: MetaboliteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Metabolite])
  async metabolites(
    @graphql.Args() args: MetaboliteFindManyArgs
  ): Promise<Metabolite[]> {
    return this.service.metabolites(args);
  }

  @graphql.Query(() => Metabolite, { nullable: true })
  async metabolite(
    @graphql.Args() args: MetaboliteFindUniqueArgs
  ): Promise<Metabolite | null> {
    const result = await this.service.metabolite(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Metabolite)
  async createMetabolite(
    @graphql.Args() args: CreateMetaboliteArgs
  ): Promise<Metabolite> {
    return await this.service.createMetabolite({
      ...args,
      data: {
        ...args.data,

        chemicalGroup: args.data.chemicalGroup
          ? {
              connect: args.data.chemicalGroup,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Metabolite)
  async updateMetabolite(
    @graphql.Args() args: UpdateMetaboliteArgs
  ): Promise<Metabolite | null> {
    try {
      return await this.service.updateMetabolite({
        ...args,
        data: {
          ...args.data,

          chemicalGroup: args.data.chemicalGroup
            ? {
                connect: args.data.chemicalGroup,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Metabolite)
  async deleteMetabolite(
    @graphql.Args() args: DeleteMetaboliteArgs
  ): Promise<Metabolite | null> {
    try {
      return await this.service.deleteMetabolite(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ChemicalGroup, {
    nullable: true,
    name: "chemicalGroup",
  })
  async getChemicalGroup(
    @graphql.Parent() parent: Metabolite
  ): Promise<ChemicalGroup | null> {
    const result = await this.service.getChemicalGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
