/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Species } from "./Species";
import { SpeciesCountArgs } from "./SpeciesCountArgs";
import { SpeciesFindManyArgs } from "./SpeciesFindManyArgs";
import { SpeciesFindUniqueArgs } from "./SpeciesFindUniqueArgs";
import { CreateSpeciesArgs } from "./CreateSpeciesArgs";
import { UpdateSpeciesArgs } from "./UpdateSpeciesArgs";
import { DeleteSpeciesArgs } from "./DeleteSpeciesArgs";
import { SpeciesService } from "../species.service";
@graphql.Resolver(() => Species)
export class SpeciesResolverBase {
  constructor(protected readonly service: SpeciesService) {}

  async _speciesItemsMeta(
    @graphql.Args() args: SpeciesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Species])
  async speciesItems(
    @graphql.Args() args: SpeciesFindManyArgs
  ): Promise<Species[]> {
    return this.service.speciesItems(args);
  }

  @graphql.Query(() => Species, { nullable: true })
  async species(
    @graphql.Args() args: SpeciesFindUniqueArgs
  ): Promise<Species | null> {
    const result = await this.service.species(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Species)
  async createSpecies(
    @graphql.Args() args: CreateSpeciesArgs
  ): Promise<Species> {
    return await this.service.createSpecies({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Species)
  async updateSpecies(
    @graphql.Args() args: UpdateSpeciesArgs
  ): Promise<Species | null> {
    try {
      return await this.service.updateSpecies({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Species)
  async deleteSpecies(
    @graphql.Args() args: DeleteSpeciesArgs
  ): Promise<Species | null> {
    try {
      return await this.service.deleteSpecies(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
