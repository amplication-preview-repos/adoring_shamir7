/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Metabolite as PrismaMetabolite,
  ChemicalGroup as PrismaChemicalGroup,
} from "@prisma/client";

export class MetaboliteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MetaboliteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.metabolite.count(args);
  }

  async metabolites(
    args: Prisma.MetaboliteFindManyArgs
  ): Promise<PrismaMetabolite[]> {
    return this.prisma.metabolite.findMany(args);
  }
  async metabolite(
    args: Prisma.MetaboliteFindUniqueArgs
  ): Promise<PrismaMetabolite | null> {
    return this.prisma.metabolite.findUnique(args);
  }
  async createMetabolite(
    args: Prisma.MetaboliteCreateArgs
  ): Promise<PrismaMetabolite> {
    return this.prisma.metabolite.create(args);
  }
  async updateMetabolite(
    args: Prisma.MetaboliteUpdateArgs
  ): Promise<PrismaMetabolite> {
    return this.prisma.metabolite.update(args);
  }
  async deleteMetabolite(
    args: Prisma.MetaboliteDeleteArgs
  ): Promise<PrismaMetabolite> {
    return this.prisma.metabolite.delete(args);
  }

  async getChemicalGroup(
    parentId: string
  ): Promise<PrismaChemicalGroup | null> {
    return this.prisma.metabolite
      .findUnique({
        where: { id: parentId },
      })
      .chemicalGroup();
  }
}
