/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SpeciesService } from "../species.service";
import { SpeciesCreateInput } from "./SpeciesCreateInput";
import { Species } from "./Species";
import { SpeciesFindManyArgs } from "./SpeciesFindManyArgs";
import { SpeciesWhereUniqueInput } from "./SpeciesWhereUniqueInput";
import { SpeciesUpdateInput } from "./SpeciesUpdateInput";

export class SpeciesControllerBase {
  constructor(protected readonly service: SpeciesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Species })
  async createSpecies(
    @common.Body() data: SpeciesCreateInput
  ): Promise<Species> {
    return await this.service.createSpecies({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Species] })
  @ApiNestedQuery(SpeciesFindManyArgs)
  async speciesItems(@common.Req() request: Request): Promise<Species[]> {
    const args = plainToClass(SpeciesFindManyArgs, request.query);
    return this.service.speciesItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Species })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async species(
    @common.Param() params: SpeciesWhereUniqueInput
  ): Promise<Species | null> {
    const result = await this.service.species({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Species })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSpecies(
    @common.Param() params: SpeciesWhereUniqueInput,
    @common.Body() data: SpeciesUpdateInput
  ): Promise<Species | null> {
    try {
      return await this.service.updateSpecies({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Species })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSpecies(
    @common.Param() params: SpeciesWhereUniqueInput
  ): Promise<Species | null> {
    try {
      return await this.service.deleteSpecies({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
